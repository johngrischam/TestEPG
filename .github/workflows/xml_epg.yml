name: XML EPG Test Builder

on:
  workflow_dispatch:        # manual trigger
  schedule:
    - cron: "0 */2 * * *"   # every 2 hours

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests xmltodict

      - name: Generate filtered EPG (test.json)
        run: |
          cat > build_epg_test.py << 'EOF'
          import json, requests, xmltodict

          data_url = 'http://116.202.210.205/test/it_dttsat_full.xml'
          print('Fetching XML...')
          resp = requests.get(data_url, timeout=60)
          resp.raise_for_status()
          xml_data = xmltodict.parse(resp.content)

          # ✅ your exact channel list
          allowed_channels = [
              "rai 1", "rai 2", "rai 3", "rai sport", "rai gulp", "rai news",
              "canale 5", "italia 1", "rete 4", "tgcom24", "mediaset 20", "iris",
              "twenty seven", "la 5", "cine 34", "focus", "top crime", "boing",
              "italia 2", "mediaset extra", "la7", "la7 cinema", "rsi 1", "rsi 2",
              "tv8", "cielo", "sky tg24",
              "nove", "discovery", "dmax", "giallo", "real time", "food network",
              "warner tv", "hgtv", "motortrend", "frisbee", "k2"
          ]

          def normalize(name):
              return name.lower().strip()

          channels = {}
          for ch in xml_data['tv']['channel']:
              ch_id = ch.get('@id')
              if not ch_id:
                  continue

              # get display names
              if isinstance(ch.get('display-name'), list):
                  display_names = [d['#text'] for d in ch['display-name'] if '#text' in d]
              elif isinstance(ch.get('display-name'), dict):
                  display_names = [ch['display-name'].get('#text')]
              else:
                  display_names = [ch_id]

              # normalize name for matching
              name_norm = normalize(display_names[0])
              if not any(name_norm == normalize(a) or normalize(a) in name_norm for a in allowed_channels):
                  continue

              # get logo if present
              logo = None
              if isinstance(ch.get('icon'), dict):
                  logo = ch['icon'].get('@src')
              elif isinstance(ch.get('icon'), list) and len(ch['icon']) > 0:
                  logo = ch['icon'][0].get('@src')

              channels[ch_id] = {
                  'id': ch_id,
                  'name': display_names[0],
                  'epgName': display_names[-1],
                  'logo': logo,
                  'programs': []
              }

          for p in xml_data['tv']['programme']:
              ch_id = p.get('@channel')
              if not ch_id or ch_id not in channels:
                  continue

              def get_text(node):
                  if isinstance(node, dict):
                      return node.get('#text')
                  return None

              channels[ch_id]['programs'].append({
                  'start': p.get('@start'),
                  'end': p.get('@stop'),
                  'title': get_text(p.get('title')),
                  'description': get_text(p.get('desc')),
                  'category': get_text(p.get('category')),
                  'poster': p.get('icon', {}).get('@src') if isinstance(p.get('icon'), dict) else None,
                  'channel': ch_id
              })

          result = list(channels.values())

          with open('test.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, ensure_ascii=False, indent=2)

          print(f"✅ test.json generated successfully with {len(result)} channels.")
          EOF

          python build_epg_test.py

      - name: Commit and push test.json
        uses: EndBug/add-and-commit@v9
        with:
          add: 'test.json'
          message: 'Updated filtered EPG (test.json)'
