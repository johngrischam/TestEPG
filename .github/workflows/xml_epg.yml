name: XML EPG Builder

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests xmltodict

      - name: Generate EPG from XML
        run: |
          cat <<'PYCODE' > build_epg.py
          import json, requests, xmltodict

          data_url = 'https://raw.githubusercontent.com/globetvapp/epg/main/Italy/italy1.xml'
          print("ðŸ”¹ Fetching XML from:", data_url)
          resp = requests.get(data_url, timeout=60)
          resp.raise_for_status()
          xml_data = xmltodict.parse(resp.content)

          allowed_names = [
              'rai 1','rai 2','rai 3','rai sport','rai gulp','rai news',
              'canale 5','italia 1','rete 4','tgcom24','mediaset 20','iris',
              'twenty seven','la 5','cine 34','focus','top crime','boing',
              'italia 2','mediaset extra','la7','la7 cinema','rsi 1','rsi 2',
              'tv8','cielo','sky tg24','nove','discovery','dmax','giallo',
              'real time','food network','warner tv','hgtv','motortrend','frisbee','k2'
          ]

          def fix_url(url):
              if not url:
                  return None
              url = url.strip()
              if url.startswith("http://"):
                  url = url.replace("http://", "https://")
              return url

          channels = {}
          tv_data = xml_data.get('tv', {})
          all_channels = tv_data.get('channel', [])
          all_programs = tv_data.get('programme', [])

          if isinstance(all_channels, dict):
              all_channels = [all_channels]
          if isinstance(all_programs, dict):
              all_programs = [all_programs]

          print(f"Found {len(all_channels)} channels, {len(all_programs)} programmes in XML")

          # --- Parse channels ---
          for ch in all_channels:
              ch_id = ch.get('@id')
              if not ch_id:
                  continue

              # display-names
              names = []
              if isinstance(ch.get('display-name'), list):
                  names = [d.get('#text') for d in ch['display-name'] if isinstance(d, dict) and '#text' in d]
              elif isinstance(ch.get('display-name'), dict):
                  names = [ch['display-name'].get('#text')]
              elif isinstance(ch.get('display-name'), str):
                  names = [ch['display-name']]

              main_name = (names[0] if names else ch_id).strip().lower()
              if main_name not in allowed_names:
                  continue

              # logo
              logo = None
              icon = ch.get('icon')
              if isinstance(icon, dict) and '@src' in icon:
                  logo = icon['@src']
              elif isinstance(icon, list) and len(icon) > 0:
                  logo = icon[0].get('@src')
              elif isinstance(icon, str):
                  logo = icon

              logo = fix_url(logo)

              channels[ch_id] = {
                  'id': ch_id,
                  'name': names[0] if names else ch_id,
                  'epgName': names[-1] if names else ch_id,
                  'logo': logo,
                  'programs': []
              }

          # --- Parse programmes ---
          for p in all_programs:
              ch_id = p.get('@channel')
              if not ch_id or ch_id not in channels:
                  continue

              def safe_text(value):
                  if isinstance(value, dict):
                      return value.get('#text')
                  return value

              title = safe_text(p.get('title'))
              desc = safe_text(p.get('desc'))
              category = safe_text(p.get('category'))

              # icon inside programme
              poster = None
              icon = p.get('icon')
              if isinstance(icon, dict) and '@src' in icon:
                  poster = icon['@src']
              elif isinstance(icon, list) and len(icon) > 0:
                  poster = icon[0].get('@src')
              elif isinstance(icon, str):
                  poster = icon

              poster = fix_url(poster) or channels[ch_id].get('logo')

              channels[ch_id]['programs'].append({
                  'start': p.get('@start'),
                  'end': p.get('@stop'),
                  'title': title,
                  'description': desc,
                  'category': category,
                  'poster': poster,
                  'channel': ch_id
              })

          print(f"âœ… Parsed {len(channels)} channels with programmes")

          result = list(channels.values())
          with open('test.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, ensure_ascii=False, indent=2)

          print("âœ… test.json generated successfully with", len(result), "channels.")
          PYCODE

          python build_epg.py

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'test.json'
          message: 'Updated test.json from GlobeTV XML feed'








